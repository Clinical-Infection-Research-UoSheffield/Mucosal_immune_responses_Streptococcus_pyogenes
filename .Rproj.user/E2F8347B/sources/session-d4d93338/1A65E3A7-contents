##### Update to the baseline correlation script with IgA only 



library(librarian)
# Load required packages using librarian
shelf(tidyverse, mfp, CorrMixed, gridExtra,corrplot) 

# Setup environment
source("scripts/setup_environment.R")

### create a dataframe with all the titres

blood1 <- readRDS("R_objects/blood_IgG_titres.RDS") %>%
    mutate(group = "Blood_IgG")

colnames(blood1)

OF_IgA1 <- readRDS("R_objects/OF_IgA_titres.RDS") %>%
    rename(visit_date = Date,
           titre = log_RLU_titres) %>%
    select(c("pid","visit_date","Antigen","titre")) %>%
    mutate(group = "OF_IgA")

colnames(OF_IgA1)

all_titres <- rbind(blood1,OF_IgA1) %>%
    mutate(group = str_replace(group, "_", " "))

### make a wide dataframe

all_titres_wide <- 
    all_titres %>%
    unite("variable", Antigen, group, sep = " ") %>% 
    filter(variable != "DNAseB OF IgA") %>%# Combine Antigen and group
    spread(key = variable, value = titre)  

# Keep only complete data 
all_titres_wide_complete <- all_titres_wide %>%
    filter(!if_any(everything(), is.na))

load("R_objects/all_events_long_incidence_wgs.RData")


pos_disease <- all_events_long_incidence_wgs %>%
    select(pid,visit_date = date,gas_infection) %>%
    filter(gas_infection == 1)

##### select the earliest row and then exlcude those who has a symptomatic event at that time. 

correlation_df <- 
all_titres_wide_complete %>%
    group_by(pid) %>%
    arrange(visit_date) %>%
    slice(1L) %>%
    left_join(pos_disease) %>% 
    filter(is.na(gas_infection)) %>%
    select(-gas_infection) 



# Full correlation matrix across all variables
cor_matrix <- cor(correlation_df %>% ungroup() %>% select(-pid, -visit_date), use = "pairwise.complete.obs")

# View the correlation matrix
print(cor_matrix)

cor_matrix

# Reorder columns logically by group and antigen
col_order <- c(
    "DNAseB Blood IgG", "GAC Blood IgG", "SLO Blood IgG", "SpyAD Blood IgG", "SpyCEP Blood IgG",
    "GAC OF IgA", "SLO OF IgA", "SpyAD OF IgA", "SpyCEP OF IgA"
)


# Reorder the columns of the correlation matrix
cor_matrix <- cor_matrix[col_order, col_order]

corrplot::corrplot.mixed(cor_matrix, upper = "color", lower = "number",
                         tl.col = "black", tl.srt = 45, lower.col = "black", number.cex = .8,
                         tl.pos = "lt")  # "lt" for left and top labels


# Assuming 'cor_matrix' is your correlation matrix
# Turn the correlation matrix into a long dataframe
cor_data_long <- as.data.frame(as.table(cor_matrix))

# Rename columns for clarity
colnames(cor_data_long) <- c("row", "col", "coef")

# Extract group and antigen information
cor_data_long <- cor_data_long %>%
    separate(row, into = c("Antigen1", "Group1"), sep = " ", extra = "merge") %>%
    separate(col, into = c("Antigen2", "Group2"), sep = " ", extra = "merge")

# View the resulting dataframe
print(cor_data_long)

cor_data_filtered <- cor_data_long %>%
    filter(Antigen1 != Antigen2)

# Calculate the range of correlation coefficients for each group
range_df <- cor_data_filtered %>%
    filter(Group1 == Group2) %>%
    group_by(Group1) %>%
    summarise(min_coef = min(coef, na.rm = TRUE), max_coef = max(coef, na.rm = TRUE))

# Extract the ranges for each group
blood_igg_range <- range_df %>% filter(Group1 == "Blood IgG")
of_iga_range <- range_df %>% filter(Group1 == "OF IgA")


# Construct the sentence
sentence <- sprintf(
    "When comparing antibody titres within individuals from the same group, a strong correlation was observed between antibodies to all antigens. Specifically, the correlation coefficients ranged from %.2f to %.2f for Blood IgG titres, and %.2f to %.2f for OF IgA titres.",
    blood_igg_range$min_coef, blood_igg_range$max_coef,
    of_iga_range$min_coef, of_iga_range$max_coef
)

# Print the sentence
print(sentence)

#################################################
################################################


# Add age into this analysis: 

wide_age_df <-correlation_df %>%
    left_join(age) 

simple_df <- wide_age_df %>%
    ungroup() %>%
    select(-pid, - visit_date, -hid, - age, -sex, - hhsize, -age_cat)


simple_df %>% colnames()

# Desired fixed order for non-M antigens
#fixed_order <- c("age_grp", "GAC", "SLO", "SpyAD", "SpyCEP", "DNAseB")
# Extract the names of the columns that are antigen/antibody related
ab_cols <- colnames(simple_df)[!colnames(simple_df) %in% "age_grp"]

# Split into antigen and antibody type
col_parts <- strcapture(
    pattern = "^(.*) (Blood IgG|OF IgA)$",
    x = ab_cols,
    proto = data.frame(antigen = character(), ab_type = character())
)

# Bind with original names
col_order_df <- data.frame(
    original_name = ab_cols,
    antigen = col_parts$antigen,
    ab_type = col_parts$ab_type
)

# Define desired antibody order
ab_order <- c("Blood IgG", "OF IgA")

# Sort
sorted_cols <- col_order_df %>%
    mutate(ab_type = factor(ab_type, levels = ab_order)) %>%
    arrange(ab_type, antigen) %>%
    pull(original_name)

# Final column order (add age_grp to the end or start)
new_col_order <- c(sorted_cols, "age_grp")

# Reorder the dataframe
simple_df <- simple_df[, new_col_order]


# Initialize an empty list to store the correlation matrices
correlation_results <- list()

# Iterate over each age group
for (ag in unique(simple_df$age_grp)) {
    
    print(ag)
    
    # Filter the dataframe for the current age group
    for_df <- simple_df %>% 
        filter(age_grp == ag) %>%
        ungroup() %>%
        select(-age_grp)
    
    # Compute the correlation matrix for the current age group
    corr_matrix_interaction_for <- for_df %>%
        cor(use = "pairwise.complete.obs", method = "spearman")
    
    # Convert the correlation matrix into a long format
    corr_long <- as.data.frame(as.table(corr_matrix_interaction_for))
    names(corr_long) <- c("xName", "yName", "corr")  # Rename columns
    
    # Add the current age group as a new column
    corr_long$age_grp <- ag
    
    # Append the result to the list
    correlation_results[[ag]] <- corr_long
}

# Combine all the correlation matrices into one data frame
final_correlation_df <- do.call(rbind, correlation_results)

levels(as.factor(final_correlation_df$age_grp))
# set levels for age groups 
level_order <- c("< 2 years", "2-4 years", "5-11 years","12-18 years", "Over 18 years")

final_correlation_df$age_grp <- factor(final_correlation_df$age_grp,levels = level_order)



pal <- wesanderson::wes_palette("Zissou1", 100, type = "continuous")

final_correlation_df %>%
    filter(! is.na(age_grp),
           xName != yName) %>%
    ggplot(
        aes(
            x = age_grp, y ="1", fill = corr
        )
    ) +
    geom_tile() + 
    facet_grid(xName ~ yName) +
    scale_fill_gradientn(colors = pal) +
    theme_minimal() + 
    labs(
        title = "Correlation coefficients within individuals at baseline (n = 431)",
        x = "Age group",
    ) +
    theme(axis.text.x = element_text(angle = -90, vjust = 0.5, hjust=1))

final_correlation_df %>%
    filter(!is.na(age_grp), xName != yName) %>%
    ggplot(
        aes(
            x = age_grp, y = 1, fill = corr
        )
    ) +
    geom_tile() +
    facet_grid(xName ~ yName) +
    scale_fill_gradientn(colors = pal) +
    theme_minimal() +
    labs(
      #  title = "Correlation coefficients within individuals at baseline (n = 431)",
        x = "Age group",
        y = NULL
    ) +
    theme(
        axis.text.x = element_text(angle = -90, vjust = 0.5, hjust = 1),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid = element_blank(),
        strip.text.y = element_text(angle = 0)
    )


final_correlation_df %>% colnames()


#### next repeat for within Antigens comparing between compartments

# Assuming 'cor_matrix' is your correlation matrix
# Turn the correlation matrix into a long dataframe
cor_data_long <- as.data.frame(as.table(cor_matrix))

# Rename columns for clarity
colnames(cor_data_long) <- c("row", "col", "coef")

# Extract group and antigen information
cor_data_long <- cor_data_long %>%
    separate(row, into = c("Antigen1", "Group1"), sep = " ", extra = "merge") %>%
    separate(col, into = c("Antigen2", "Group2"), sep = " ", extra = "merge")

# Filter out rows where Group1 == Group2 and ensure we handle duplicates
cor_data_filtered <- cor_data_long %>%
    filter(Group1 != Group2) %>%
    mutate(group_interaction = ifelse(Group1 < Group2, paste(Group1, Group2, sep = "_"), paste(Group2, Group1, sep = "_")))

# Calculate the range of correlation coefficients for each antigen
range_df <- cor_data_filtered %>%
    filter(Antigen1 == Antigen2) %>%
    group_by(group_interaction) %>%
    summarise(
        min_coef = min(coef, na.rm = TRUE),
        max_coef = max(coef, na.rm = TRUE)
    )

# Print the resulting dataframe
print(range_df)


# Extract the ranges for specific group interactions
blood_igg_of_iga_range <- range_df %>% filter(group_interaction == "Blood IgG_OF IgA")
of_igg_of_iga_range <- range_df %>% filter(group_interaction == "OF IgA_OF IgG")

# Construct the sentence
sentence <- sprintf(
    "Next, we compared the correlation of antibody titres between compartments for each antigen. The correlation between antigen-specific blood IgG and oral fluid IgA was much lower, ranging from %.2f to %.2f.",
    blood_igg_of_iga_range$min_coef, blood_igg_of_iga_range$max_coef
)

# Print the sentence
print(sentence)




# Specify the width, height, and resolution
plot_width <- 1160 / 96  # Width in inches
plot_height <- 900 / 96  # Height in inches
plot_dpi <- 300  # Resolution in dpi
output_file <- "R_output/Blood_vs_oral_fluid_baseline_V2.png"  # Path and name

corr_matrix_interaction <- 
    correlation_df %>%
    ungroup() %>%
    select(contains(c("Blood IgG","OF IgA"))) %>%
    cor(use = "pairwise.complete.obs")
    
#port the plot
png(filename = output_file, width = plot_width * plot_dpi, height = plot_height * plot_dpi, res = plot_dpi)
corrplot.mixed(corr_matrix_interaction, upper = "color", lower = "number",
               tl.col = "black", tl.srt = 45, lower.col = "black", number.cex = 1.3,
               tl.pos = "lt",tl.cex = 1.5) 
dev.off()



##### ##### ##### ##### ##### 
##### correlation matrix #### 
##### ##### ##### ##### ##### 

##### Tidy data to allow a correlation matrix to be draw for each group (Blood IgG, OF IgA, OF IgG) and determination of p values 

for (grp in unique(all_titres$group)) {
    
df_text <- correlation_df %>%
    ungroup() %>%
    select(contains(grp))

# Turn the correlation matrix into a long dataframe
cor_data_long <- as.data.frame(as.table(cor_matrix))

# Remove vales where both antigens are the same
cor_data_filtered <- cor_data_long %>%
    filter(Var1 != Var2)

# Function to calculate correlation coefficients and p-values
get_cor_and_pval <- function(df) {
    # Initialize an empty dataframe to store results
    results <- tibble(Var1 = character(), Var2 = character(),
                      Correlation = numeric(), PValue = numeric())
    
    # Loop through all combinations of variables
    for (i in 1:(ncol(df) - 1)) {
        for (j in (i + 1):ncol(df)) {
            # Perform correlation test
            test <- cor.test(df[[i]], df[[j]], use = "pairwise.complete.obs")
            
            # Store results in the dataframe
            results <- results %>%
                add_row(Var1 = colnames(df)[i],
                        Var2 = colnames(df)[j],
                        Correlation = test$estimate,
                        PValue = test$p.value)
        }
    }
    return(results)
}

# Apply the function to your dataframe
cor_pval_results <- get_cor_and_pval(df_text)

# View the results
print(cor_pval_results)

# Calculate the range of correlation coefficients for each group
maxp <- cor_pval_results %>%
    summarise(max_p = max(PValue, na.rm = TRUE))

# Construct the sentence with the dynamic condition
if (maxp$max_p < 0.0001) {
    sentence <- sprintf(
        "When comparing baseline %s antibody titres within individuals, a strong correlation was observed between antibodies to all antigens, ranging from %.2f to %.2f (p < 0.0001 for all comparisons).",
        grp,
        min(cor_pval_results$Correlation, na.rm = TRUE),
        max(cor_pval_results$Correlation, na.rm = TRUE)
    )
} else {
    sentence <- sprintf(
        "When comparing baseline %s antibody titres within individuals, a strong correlation was observed between antibodies to all antigens, ranging from %.2f to %.2f (p < %.4f for all comparisons).",
        grp,
        min(cor_pval_results$Correlation, na.rm = TRUE),
        max(cor_pval_results$Correlation, na.rm = TRUE),
        maxp$max_p
    )
}

# Print the sentence
print(sentence)

}



#### create a longer dataframe with the following variables: "pid"        "Antigen"    "visit_date"  "Blood_IgG"  "OF_IgA"     "OF_IgG"
# This keeps the same visits in the dataframe (the first complete set of measurements in each participant exlcuding those with a culture confirmed event at the time)


correlation_df_long <- correlation_df %>%
    pivot_longer(
        cols = -c(pid, visit_date),
        names_to = c("Antigen", "group"),
        names_sep = " "
    ) %>%
    pivot_wider(
        names_from = group,
        values_from = value
    ) %>%
    select(pid, Antigen, visit_date, Blood_IgG, OF_IgA)


# View the transformed data
print(correlation_df_long)


#### Plot each comparison from baseline: 

plot1 <- correlation_df_long  %>%
    filter(Antigen != "DNAseB") %>%
    ungroup() %>%
    ggplot(
        aes(
            x = Blood_IgG, y = OF_IgA, col = Antigen
        )
    ) +
    geom_point(width = 0.1, alpha = 0.4) +
    facet_wrap(~ Antigen, nrow = 1) +
    geom_smooth( method = "lm") +
    guides(col = "none") +
    theme_minimal() +
    scale_colour_manual(values = c("SpyCEP" = "#FDC086", "SpyAD" = "yellow", "SLO" = "#386CB0", "GAC" = "#7FC97F", "DNAseB" = "#BEAED4")) +  # Different colours for each antigen
    labs( x = "Blood IgG (log10 RLU/mL)", y = "Oral fluid IgA (log10 RLU/mL)") +
    ggtitle("Correlation between baseline blood IgG and oral fluid IgA") +
    ggpubr::stat_cor(method = "pearson",  aes(color = "black")) +
    theme_universal(base_size = plot_basesize)

plot1





library(gridExtra)

# Assuming plot1, plot2, plot3 are already created ggplot objects
# Specify the width, height, and resolution for the output image
plot_width <- 1120 / 96  # Width in inches
plot_height <- 300 / 96  # Height in inches
plot_dpi <- 300  # Resolution in dpi
output_file <- "R_output/between_compartment_plot_V2.png"  # Path and name


# Save the combined plot as a single image
ggsave(filename = output_file, plot = plot1, width = plot_width, height = plot_height, dpi = plot_dpi)



###############################################
#### Compartmentalisation scores by age #######



### create a dataframe with all the titres

bloodZ <- readRDS("R_objects/blood_IgG_Z.RDS") %>%
    mutate(group = "Blood_IgG") %>%
    select(-age)


OF_IgAZ <- readRDS("R_objects/OF_IgA_Z.RDS") %>%
    select(c("pid","visit_date","Antigen","titre")) %>%
    mutate(group = "OF_IgA")

all_titresZ <- rbind(bloodZ,OF_IgAZ)

all_titres_wideZ <- 
    all_titresZ %>%
    unite("variable", Antigen, group, sep = " ") %>% 
    filter(variable != "DNAseB OF_IgA") %>%# Combine Antigen and group
    spread(key = variable, value = titre)  


# Keep only complete data 
all_titres_wide_completeZ <- all_titres_wideZ %>%
    filter(!if_any(everything(), is.na))

##### select the earliest row and then exlcude those who has a symptomatic event at that time. 

correlation_dfZ <- 
    all_titres_wide_completeZ %>%
    group_by(pid) %>%
    arrange(visit_date) %>%
    slice(1L) %>%
    left_join(pos_disease) %>% 
    filter(is.na(gas_infection)) %>%
    select(-gas_infection) 


correlation_df_longZ <- correlation_dfZ %>%
    pivot_longer(
        cols = -c(pid, visit_date),
        names_to = c("Antigen", "group"),
        names_sep = " "
    ) %>%
    pivot_wider(
        names_from = group,
        values_from = value
    ) %>%
    select(pid, Antigen, visit_date, Blood_IgG, OF_IgA)

# Assuming 'age' is a dataframe with columns: pid, age, age_group

# Join the age data to the existing correlation_df_long
correlation_df_long_ageZ <- correlation_df_longZ %>%
    left_join(age)

# Calculate compartmentalization scores for difference and ratio
compartmentalization_scores <- correlation_df_long_ageZ %>%
    mutate(
        OF_IgA_vs_blood_ratio =  OF_IgA / Blood_IgG)


# Plot the ratio of titres vs. age
plot_ratio <- compartmentalization_scores %>%
    pivot_longer(cols = contains("_ratio"), names_to = "Comparison", values_to = "Compartmentalization_Score") %>%
    filter(Antigen != "DNAseB") %>%
    ggplot(aes(x = age, y = log(Compartmentalization_Score))) +
    geom_point(aes(x = age, y = log(Compartmentalization_Score), color = Antigen),alpha = 0.5) +
    geom_smooth(aes(x = age, y = log(Compartmentalization_Score), color = Antigen), method = "lm", se = TRUE) +
    facet_grid(Comparison ~ Antigen, scales = "free_y") +
    theme_minimal() +
    ggpubr::stat_cor() +
    labs(
        title = "Compartmentalization Score (Ratio) vs. Age",
        x = "Age",
        y = "Compartmentalization Score (Ratio)"
    ) +
    scale_colour_manual(values = c("SpyCEP" = "#FDC086", "SpyAD" = "yellow", "SLO" = "#386CB0", "GAC" = "#7FC97F", "DNAseB" = "#BEAED4"))

plot_ratio



# Plot the ratio of titres vs. age group 
plot_ratio <- compartmentalization_scores %>%
    pivot_longer(cols = contains("_ratio"), names_to = "Comparison", values_to = "Compartmentalization_Score") %>%
    filter(Antigen != "DNAseB") %>%
    ggplot(aes(x = age_grp, y = log(Compartmentalization_Score))) +
    geom_jitter(aes(x = age_grp, y = log(Compartmentalization_Score), color = Antigen),alpha = 0.5, width = 0.2) +
    facet_grid(Comparison ~ Antigen, scales = "free_y") +
    theme_minimal() +
    ggpubr::stat_compare_means() +
    labs(
        title = "Compartmentalization Score (Ratio of Z score transformed antibody levels) vs. Age",
        x = "Age",
        y = "Compartmentalization Score (Ratio of Z score transformed antibody levels)"
    ) +
    scale_colour_manual(values = c("SpyCEP" = "#FDC086", "SpyAD" = "yellow", "SLO" = "#386CB0", "GAC" = "#7FC97F", "DNAseB" = "#BEAED4"))

print(plot_ratio)

###
# 1. Pivot longer
long_data <- compartmentalization_scores %>%
    pivot_longer(cols = contains("_ratio"), names_to = "Comparison", values_to = "Compartmentalization_Score") %>%
    filter(Antigen != "DNAseB")

dunn_results <- long_data %>%
    mutate(log_score = log(Compartmentalization_Score)) %>%
    group_by(Comparison, Antigen) %>%
    rstatix::dunn_test(log_score ~ age_grp, p.adjust.method = "bonferroni") %>%
    filter(p.adj < 0.05) 


# Stack y.positions so brackets don't overlap
dunn_results <- dunn_results %>%
    group_by(Comparison, Antigen) %>%
    mutate(
        y.position = (5)
        + 0.7 * row_number()
    )

plot_IgA_age_group <- ggplot(long_data, aes(x = age_grp, y = log(Compartmentalization_Score))) +
    geom_boxplot(outliers = F)+
    geom_jitter(aes(color = Antigen), alpha = 0.5, width = 0.2) +
    facet_wrap(~Antigen, nrow = 1) +
    theme_minimal() +
    ggpubr::stat_pvalue_manual(
        dunn_results,
        label = "p.adj.signif",
        hide.ns = TRUE
    ) +
    labs(
        #  title = "Compartmentalization Score (Ratio of Z score transformed antibody levels) vs. Age",
        x = "Age",
        y = "log OF IgA:Blood IgG Z score ratio"
    ) +
    guides(col = "none") +
    scale_colour_manual(values = c("SpyCEP" = "#FDC086", "SpyAD" = "#d19c2f", "SLO" = "#386CB0", "GAC" = "#7FC97F", "DNAseB" = "#BEAED4")) +
    theme_universal() +
    theme(axis.text.x = element_text(angle = -90, vjust = 0.5, hjust = 1))

plot_IgA_age_group

# Specify the width, height, and resolution for the output image
plot_width <- 800 / 96  # Width in inches
plot_height <- 560 / 96  # Height in inches
plot_dpi <- 600  # Resolution in dpi
output_file <- "R_output/compartmentalisation_by_age_V1.png"  # Path and name


# Save the combined plot as a single image
ggsave(filename = output_file, plot = plot_IgA_age_group, width = plot_width, height = plot_height, dpi = plot_dpi)




################################################
################################################




##### Compile this figure: 
shelf(gridExtra, grid, gtable, ggplotify, patchwork, magick,cowplot)


panelA <- image_read("~/Desktop/Alex/PhD/Papers/SpyCATS/SpyCATS Oral fluid/Figures/PPT output/Baseline_age_profiles_edited.png")
panelA <- ggdraw() + draw_image(panelA)
panelA

panelB <- image_read("~/Desktop/Alex/PhD/Papers/SpyCATS/SpyCATS Oral fluid/Figures/PPT output/Baseline_Blood_OF_correlation_edited.png")
panelB <- ggdraw() + draw_image(panelB)

panelC <- plot_IgA_age_group



second_row <- plot_grid(
    panelC,panelB,    # Panels B, C, and E # Set the width ratio
    labels = c("B", "C"),      # Optional: Add labels
    ncol = 2,                       # Explicitly force all panels into one row
    align = "h"                     # Align panels horizontally
)

final_plot <- plot_grid(
    panelA,
    second_row,
    ncol = 1,
    labels = c("A")
)


final_plot

# Save the final plot
ggsave("R_output/compartmentalisation_by_age_V1.png", final_plot, dpi = 600, width = 1160 / 96, height = 880/96, bg = "white")



######### compartmentalisation 

dunn_results2 <-
long_data %>%
  #  filter(age >4) %>%
    mutate(log_score = log(Compartmentalization_Score)) %>%
    ungroup() %>%
    rstatix::dunn_test(log_score ~ Antigen, p.adjust.method = "bonferroni") %>%
    filter(p.adj < 0.3) 


# Stack y.positions so brackets don't overlap
dunn_results2 <- dunn_results2 %>%
    mutate(
        y.position = (1.5)
        + 0.7 * row_number(),
        p.adj = round(p.adj,3)
    )


long_data %>%
    ggplot(
        aes( x = Antigen, y = log10(Compartmentalization_Score))
    ) +
    geom_boxplot(outliers = F) +
    geom_jitter(aes( col = Antigen), alpha = 0.6) +
    theme_minimal() +
    ggpubr::stat_pvalue_manual(
        dunn_results2,
        label = "p.adj"
       # hide.ns = TRUE
    ) +
    labs(
        #  title = "Compartmentalization Score (Ratio of Z score transformed antibody levels) vs. Age",
        x = "Antigen",
        y = "log OF IgA:Blood IgG Z score ratio"
    ) +
    guides(col = "none") +
    scale_colour_manual(values = c("SpyCEP" = "#FDC086", "SpyAD" = "#d19c2f", "SLO" = "#386CB0", "GAC" = "#7FC97F", "DNAseB" = "#BEAED4")) +
    theme_universal()



figa<-
    
    
    long_data %>%
    ggplot(
        aes( x = Antigen, y = log10(Compartmentalization_Score))
    ) +
    geom_boxplot(outliers = F) +
    geom_jitter(aes( col = Antigen), alpha = 0.6) +
    theme_minimal() +
    ggpubr::stat_pvalue_manual(
        dunn_results2,
        label = "p.adj"
        # hide.ns = TRUE
    ) +
    labs(
        #  title = "Compartmentalization Score (Ratio of Z score transformed antibody levels) vs. Age",
        x = "Antigen",
        y = "log OF IgA:Blood IgG Z score ratio"
    ) +
    guides(col = "none") +
    scale_colour_manual(values = c("SpyCEP" = "#FDC086", "SpyAD" = "#d19c2f", "SLO" = "#386CB0", "GAC" = "#7FC97F", "DNAseB" = "#BEAED4")) +
    theme_universal()





#### 
